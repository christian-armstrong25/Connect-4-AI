// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var Pervasives = require("bs-platform/lib/js/pervasives.js");
var Caml_format = require("bs-platform/lib/js/caml_format.js");
var CS17SetupGame$Game = require("./CS17SetupGame.bs.js");

function otherPlayer(player) {
  if (player) {
    return /* P1 */0;
  } else {
    return /* P2 */1;
  }
}

function string_of_token(t) {
  switch (t) {
    case /* Empty */0 :
        return "  ";
    case /* T1 */1 :
        return "T1";
    case /* T2 */2 :
        return "T2";
    
  }
}

function createEmptyRow(columns) {
  if (columns !== 0) {
    if (columns > 0) {
      return {
              hd: /* Empty */0,
              tl: createEmptyRow(columns - 1 | 0)
            };
    } else {
      return Pervasives.failwith("a row needs a positive number of columns");
    }
  } else {
    return /* [] */0;
  }
}

function createBoard(rows, listOfColumns) {
  if (rows !== 0) {
    if (rows > 0) {
      return {
              hd: listOfColumns,
              tl: createBoard(rows - 1 | 0, listOfColumns)
            };
    } else {
      return Pervasives.failwith("a board needs a positive number of rows");
    }
  } else {
    return /* [] */0;
  }
}

function initialState(s) {
  var boardDims = CS17SetupGame$Game.parseBoardDims(s);
  var boardHeight = CS17SetupGame$Game.getBoardHeight(boardDims);
  var boardWidth = CS17SetupGame$Game.getBoardWidth(boardDims);
  var initialBoard = createBoard(boardHeight, createEmptyRow(boardWidth));
  if (boardHeight >= 4 && boardWidth >= 4) {
    return /* State */{
            _0: {
              TAG: /* Ongoing */1,
              _0: /* P1 */0
            },
            _1: initialBoard
          };
  } else {
    return Pervasives.failwith("Domain error, board must be at least 4x4");
  }
}

function stringOfPlayer(p) {
  if (p) {
    return "P2";
  } else {
    return "P1";
  }
}

function printIntListContents(aloi) {
  if (!aloi) {
    return "";
  }
  var tl = aloi.tl;
  var hd = aloi.hd;
  if (tl) {
    return string_of_token(hd) + (" | " + printIntListContents(tl));
  } else {
    return string_of_token(hd);
  }
}

function printIntList(aloi) {
  return "[" + (printIntListContents(aloi) + "]");
}

function printBoard(board) {
  if (!board) {
    return "";
  }
  var tl = board.tl;
  var hd = board.hd;
  if (tl) {
    return printIntList(hd) + ("\n" + printBoard(tl));
  } else {
    return printIntList(hd);
  }
}

function stringOfState(sos) {
  return printBoard(sos._1);
}

function stringOfMove(m) {
  return "Player placed token in column " + String(m._0);
}

function legalMovesHelper(_topRow, _int) {
  while(true) {
    var $$int = _int;
    var topRow = _topRow;
    if (!topRow) {
      return Pervasives.failwith("empty row does not exist");
    }
    var tl = topRow.tl;
    var hd = topRow.hd;
    if (!tl) {
      if (hd === /* Empty */0) {
        return {
                hd: /* Move */{
                  _0: $$int
                },
                tl: /* [] */0
              };
      } else {
        return /* [] */0;
      }
    }
    if (hd === /* Empty */0) {
      return {
              hd: /* Move */{
                _0: $$int
              },
              tl: legalMovesHelper(tl, $$int + 1 | 0)
            };
    }
    _int = $$int + 1 | 0;
    _topRow = tl;
    continue ;
  };
}

function legalMoves(state) {
  var match = state._1;
  if (match) {
    return legalMovesHelper(match.hd, 1);
  } else {
    return Pervasives.failwith("empty row does not exist");
  }
}

function gameStatus(state) {
  return state._0;
}

function transpose(xiexie) {
  if (!xiexie) {
    return Pervasives.failwith("A board cannot be 0 - dimensional.");
  }
  var match = xiexie.hd;
  if (match) {
    if (match.tl) {
      return {
              hd: List.map(List.hd, xiexie),
              tl: transpose(List.map(List.tl, xiexie))
            };
    } else {
      return {
              hd: List.flatten(xiexie),
              tl: /* [] */0
            };
    }
  } else {
    return Pervasives.failwith("A board cannot be 0 - dimensional.");
  }
}

function placeHolders($$int) {
  if ($$int !== 0) {
    return {
            hd: /* Empty */0,
            tl: placeHolders($$int - 1 | 0)
          };
  } else {
    return /* [] */0;
  }
}

function diagonalTransposeHelper(board, n, k) {
  if (!board) {
    return /* [] */0;
  }
  var tl = board.tl;
  var hd = board.hd;
  if (tl) {
    return {
            hd: Pervasives.$at(k, Pervasives.$at(hd, n)),
            tl: diagonalTransposeHelper(tl, List.tl(n), {
                  hd: /* Empty */0,
                  tl: k
                })
          };
  } else {
    return {
            hd: Pervasives.$at(k, Pervasives.$at(hd, n)),
            tl: /* [] */0
          };
  }
}

function diagonalTranspose(board) {
  return transpose(diagonalTransposeHelper(board, placeHolders(List.length(board) - 1 | 0), /* [] */0));
}

function horzFlip(board) {
  if (board) {
    return List.rev(board);
  } else {
    return Pervasives.failwith("matrix cant be empty");
  }
}

function tokenOfPlayer(p) {
  if (p) {
    return /* T2 */2;
  } else {
    return /* T1 */1;
  }
}

function updateColumn(board, token) {
  if (!board) {
    return {
            hd: token,
            tl: /* [] */0
          };
  }
  if (board.hd !== 0) {
    return Pervasives.failwith("illegal move");
  }
  var tl = board.tl;
  if (!tl) {
    return {
            hd: token,
            tl: /* [] */0
          };
  }
  switch (tl.hd) {
    case /* Empty */0 :
        return {
                hd: /* Empty */0,
                tl: updateColumn(tl, token)
              };
    case /* T1 */1 :
        var tl$1 = tl.tl;
        if (tl$1) {
          return {
                  hd: token,
                  tl: {
                    hd: /* T1 */1,
                    tl: tl$1
                  }
                };
        } else {
          return {
                  hd: token,
                  tl: {
                    hd: /* T1 */1,
                    tl: /* [] */0
                  }
                };
        }
    case /* T2 */2 :
        var tl$2 = tl.tl;
        if (tl$2) {
          return {
                  hd: token,
                  tl: {
                    hd: /* T2 */2,
                    tl: tl$2
                  }
                };
        } else {
          return {
                  hd: token,
                  tl: {
                    hd: /* T2 */2,
                    tl: /* [] */0
                  }
                };
        }
    
  }
}

function updateBoardHelper(board, p, n) {
  if (!board) {
    return Pervasives.failwith("illegal move");
  }
  var tl = board.tl;
  var hd = board.hd;
  if (n !== 1) {
    return {
            hd: hd,
            tl: updateBoardHelper(tl, p, n - 1 | 0)
          };
  } else {
    return {
            hd: updateColumn(hd, p ? /* T2 */2 : /* T1 */1),
            tl: tl
          };
  }
}

function updateBoard(board, p, m) {
  return transpose(updateBoardHelper(transpose(board), p, m._0));
}

function checkForDraw(b) {
  if (b) {
    return !List.mem(/* Empty */0, b.hd);
  } else {
    return false;
  }
}

function checkFourWinHelper(_b) {
  while(true) {
    var b = _b;
    if (!b) {
      return false;
    }
    var match = b.tl;
    if (!match) {
      return false;
    }
    var match$1 = match.tl;
    if (!match$1) {
      return false;
    }
    if (!match$1.tl) {
      return false;
    }
    switch (b.hd) {
      case /* Empty */0 :
          _b = b.tl;
          continue ;
      case /* T1 */1 :
          var match$2 = b.tl;
          if (match$2.hd !== 1) {
            _b = b.tl;
            continue ;
          }
          var match$3 = match$2.tl;
          if (match$3.hd !== 1) {
            _b = b.tl;
            continue ;
          }
          if (match$3.tl.hd === 1) {
            return true;
          }
          _b = b.tl;
          continue ;
      case /* T2 */2 :
          var match$4 = b.tl;
          if (match$4.hd >= 2) {
            var match$5 = match$4.tl;
            if (match$5.hd >= 2) {
              if (match$5.tl.hd >= 2) {
                return true;
              }
              _b = b.tl;
              continue ;
            }
            _b = b.tl;
            continue ;
          }
          _b = b.tl;
          continue ;
      
    }
  };
}

function checkFourWin(_b) {
  while(true) {
    var b = _b;
    if (!b) {
      return false;
    }
    var hd = b.hd;
    if (!hd) {
      return false;
    }
    if (checkFourWinHelper(hd)) {
      return true;
    }
    _b = b.tl;
    continue ;
  };
}

function checkFour(b, p) {
  if (checkForDraw(b)) {
    return /* State */{
            _0: /* Draw */0,
            _1: b
          };
  } else if (checkFourWin(b) || checkFourWin(transpose(b)) || checkFourWin(diagonalTranspose(b)) || checkFourWin(diagonalTranspose(horzFlip(b)))) {
    return /* State */{
            _0: {
              TAG: /* Win */0,
              _0: p
            },
            _1: b
          };
  } else {
    return /* State */{
            _0: {
              TAG: /* Ongoing */1,
              _0: p ? /* P1 */0 : /* P2 */1
            },
            _1: b
          };
  }
}

function nextState(state, m) {
  var p = state._0;
  if (typeof p === "number") {
    return Pervasives.failwith("Game already over!");
  }
  if (p.TAG === /* Win */0) {
    return Pervasives.failwith("Game already over!");
  }
  var p$1 = p._0;
  var updatedBoard = updateBoard(state._1, p$1, m);
  return checkFour(updatedBoard, p$1);
}

function moveOfString(string, state) {
  if (List.mem(/* Move */{
          _0: Caml_format.caml_int_of_string(string)
        }, legalMoves(state))) {
    return /* Move */{
            _0: Caml_format.caml_int_of_string(string)
          };
  } else {
    return Pervasives.failwith("This is not a legal move, try\n                                  something else.");
  }
}

function estimateRow(token) {
  if (!token) {
    return 0.0;
  }
  switch (token.hd) {
    case /* Empty */0 :
        var tl = token.tl;
        if (!tl) {
          return 0.0;
        }
        switch (tl.hd) {
          case /* Empty */0 :
              var tl$1 = tl.tl;
              if (!tl$1) {
                return 0.0;
              }
              if (tl$1.hd !== 0) {
                return 0.0 + estimateRow(tl$1);
              }
              var tl$2 = tl$1.tl;
              if (!tl$2) {
                return 0.0;
              }
              if (tl$2.hd !== 0) {
                return 0.0 + estimateRow(tl$2);
              }
              var tl$3 = tl$2.tl;
              if (tl$3) {
                return 0.0 + estimateRow(tl$3);
              } else {
                return 0.0;
              }
          case /* T1 */1 :
              var match = tl.tl;
              if (!match) {
                return 0.0 + estimateRow(tl);
              }
              if (match.hd !== 1) {
                return 0.0 + estimateRow(tl);
              }
              var match$1 = match.tl;
              if (!match$1) {
                return 0.0 + estimateRow(tl);
              }
              switch (match$1.hd) {
                case /* Empty */0 :
                    var tl$4 = match$1.tl;
                    if (tl$4) {
                      return 90000.0 + estimateRow(tl$4);
                    } else {
                      return 90000.0;
                    }
                case /* T1 */1 :
                    var match$2 = match$1.tl;
                    if (!match$2) {
                      return 0.0 + estimateRow(tl);
                    }
                    if (match$2.hd !== 0) {
                      return 0.0 + estimateRow(tl);
                    }
                    var tl$5 = match$2.tl;
                    if (tl$5) {
                      return 900000.0 + estimateRow(tl$5);
                    } else {
                      return 900000.0;
                    }
                case /* T2 */2 :
                    return 0.0 + estimateRow(tl);
                
              }
          case /* T2 */2 :
              var match$3 = tl.tl;
              if (!match$3) {
                return 0.0 + estimateRow(tl);
              }
              if (match$3.hd < 2) {
                return 0.0 + estimateRow(tl);
              }
              var match$4 = match$3.tl;
              if (!match$4) {
                return 0.0 + estimateRow(tl);
              }
              switch (match$4.hd) {
                case /* Empty */0 :
                    var tl$6 = match$4.tl;
                    if (tl$6) {
                      return -90000.0 + estimateRow(tl$6);
                    } else {
                      return -90000.0;
                    }
                case /* T1 */1 :
                    return 0.0 + estimateRow(tl);
                case /* T2 */2 :
                    var match$5 = match$4.tl;
                    if (!match$5) {
                      return 0.0 + estimateRow(tl);
                    }
                    if (match$5.hd !== 0) {
                      return 0.0 + estimateRow(tl);
                    }
                    var tl$7 = match$5.tl;
                    if (tl$7) {
                      return -900000.0 + estimateRow(tl$7);
                    } else {
                      return -900000.0;
                    }
                
              }
          
        }
    case /* T1 */1 :
        var tl$8 = token.tl;
        if (!tl$8) {
          return 1.0;
        }
        switch (tl$8.hd) {
          case /* Empty */0 :
              return 1.0 + estimateRow(tl$8);
          case /* T1 */1 :
              var tl$9 = tl$8.tl;
              if (!tl$9) {
                return 10.0;
              }
              switch (tl$9.hd) {
                case /* Empty */0 :
                    return 10.0 + estimateRow(tl$9);
                case /* T1 */1 :
                    var tl$10 = tl$9.tl;
                    if (!tl$10) {
                      return 100.0;
                    }
                    switch (tl$10.hd) {
                      case /* Empty */0 :
                          return 100.0 + estimateRow(tl$10);
                      case /* T1 */1 :
                          var tl$11 = tl$10.tl;
                          if (tl$11) {
                            return 1000000.0 + estimateRow(tl$11);
                          } else {
                            return 1000000.0;
                          }
                      case /* T2 */2 :
                          var tl$12 = tl$10.tl;
                          if (tl$12) {
                            return -5000.0 + estimateRow(tl$12);
                          } else {
                            return -10000.0;
                          }
                      
                    }
                case /* T2 */2 :
                    var match$6 = tl$9.tl;
                    if (!match$6) {
                      return 10.0 + estimateRow(tl$9);
                    }
                    if (match$6.hd !== 1) {
                      return 10.0 + estimateRow(tl$9);
                    }
                    var tl$13 = match$6.tl;
                    if (tl$13) {
                      return -5000.0 + estimateRow(tl$13);
                    } else {
                      return -10000.0;
                    }
                
              }
          case /* T2 */2 :
              var match$7 = tl$8.tl;
              if (!match$7) {
                return 1.0 + estimateRow(tl$8);
              }
              switch (match$7.hd) {
                case /* Empty */0 :
                    return 1.0 + estimateRow(tl$8);
                case /* T1 */1 :
                    var match$8 = match$7.tl;
                    if (!match$8) {
                      return 1.0 + estimateRow(tl$8);
                    }
                    if (match$8.hd !== 1) {
                      return 1.0 + estimateRow(tl$8);
                    }
                    var tl$14 = match$8.tl;
                    if (tl$14) {
                      return -5000.0 + estimateRow(tl$14);
                    } else {
                      return -10000.0;
                    }
                case /* T2 */2 :
                    var match$9 = match$7.tl;
                    if (!match$9) {
                      return 1.0 + estimateRow(tl$8);
                    }
                    if (match$9.hd < 2) {
                      return 1.0 + estimateRow(tl$8);
                    }
                    var tl$15 = match$9.tl;
                    if (tl$15) {
                      return 5000.0 + estimateRow(tl$15);
                    } else {
                      return 10000.0;
                    }
                
              }
          
        }
    case /* T2 */2 :
        var tl$16 = token.tl;
        if (!tl$16) {
          return -1.0;
        }
        switch (tl$16.hd) {
          case /* Empty */0 :
              return -1.0 + estimateRow(tl$16);
          case /* T1 */1 :
              var match$10 = tl$16.tl;
              if (!match$10) {
                return -1.0 + estimateRow(tl$16);
              }
              switch (match$10.hd) {
                case /* Empty */0 :
                    return -1.0 + estimateRow(tl$16);
                case /* T1 */1 :
                    var match$11 = match$10.tl;
                    if (!match$11) {
                      return -1.0 + estimateRow(tl$16);
                    }
                    if (match$11.hd !== 1) {
                      return -1.0 + estimateRow(tl$16);
                    }
                    var tl$17 = match$11.tl;
                    if (tl$17) {
                      return -5000.0 + estimateRow(tl$17);
                    } else {
                      return -10000.0;
                    }
                case /* T2 */2 :
                    var match$12 = match$10.tl;
                    if (!match$12) {
                      return -1.0 + estimateRow(tl$16);
                    }
                    if (match$12.hd < 2) {
                      return -1.0 + estimateRow(tl$16);
                    }
                    var tl$18 = match$12.tl;
                    if (tl$18) {
                      return 5000.0 + estimateRow(tl$18);
                    } else {
                      return 10000.0;
                    }
                
              }
          case /* T2 */2 :
              var tl$19 = tl$16.tl;
              if (!tl$19) {
                return -10.0;
              }
              switch (tl$19.hd) {
                case /* Empty */0 :
                    return -10.0 + estimateRow(tl$19);
                case /* T1 */1 :
                    var match$13 = tl$19.tl;
                    if (!match$13) {
                      return -10.0 + estimateRow(tl$19);
                    }
                    if (match$13.hd < 2) {
                      return -10.0 + estimateRow(tl$19);
                    }
                    var tl$20 = match$13.tl;
                    if (tl$20) {
                      return 5000.0 + estimateRow(tl$20);
                    } else {
                      return 10000.0;
                    }
                case /* T2 */2 :
                    var tl$21 = tl$19.tl;
                    if (!tl$21) {
                      return -100.0;
                    }
                    switch (tl$21.hd) {
                      case /* Empty */0 :
                          return -100.0 + estimateRow(tl$21);
                      case /* T1 */1 :
                          var tl$22 = tl$21.tl;
                          if (tl$22) {
                            return 5000.0 + estimateRow(tl$22);
                          } else {
                            return 10000.0;
                          }
                      case /* T2 */2 :
                          var tl$23 = tl$21.tl;
                          if (tl$23) {
                            return -1000000.0 + estimateRow(tl$23);
                          } else {
                            return -1000000.0;
                          }
                      
                    }
                
              }
          
        }
    
  }
}

function estimateBoard(board) {
  if (!board) {
    return 0.0;
  }
  var tl = board.tl;
  var hd = board.hd;
  if (tl) {
    return estimateRow(hd) + estimateBoard(tl);
  } else {
    return estimateRow(hd);
  }
}

function estimateValue(instate) {
  var match = instate._0;
  if (typeof match === "number") {
    return 0.0;
  }
  if (match.TAG === /* Win */0) {
    if (match._0) {
      return -1000000.0;
    } else {
      return 1000000.0;
    }
  }
  var b = instate._1;
  return estimateBoard(b) + estimateBoard(transpose(b)) + estimateBoard(diagonalTranspose(b)) + estimateBoard(diagonalTranspose(horzFlip(b)));
}

var Connect4 = {
  otherPlayer: otherPlayer,
  string_of_token: string_of_token,
  createEmptyRow: createEmptyRow,
  createBoard: createBoard,
  initialState: initialState,
  stringOfPlayer: stringOfPlayer,
  printIntListContents: printIntListContents,
  printIntList: printIntList,
  printBoard: printBoard,
  stringOfState: stringOfState,
  stringOfMove: stringOfMove,
  legalMovesHelper: legalMovesHelper,
  legalMoves: legalMoves,
  gameStatus: gameStatus,
  transpose: transpose,
  placeHolders: placeHolders,
  diagonalTransposeHelper: diagonalTransposeHelper,
  diagonalTranspose: diagonalTranspose,
  horzFlip: horzFlip,
  tokenOfPlayer: tokenOfPlayer,
  updateColumn: updateColumn,
  updateBoardHelper: updateBoardHelper,
  updateBoard: updateBoard,
  checkForDraw: checkForDraw,
  checkFourWinHelper: checkFourWinHelper,
  checkFourWin: checkFourWin,
  checkFour: checkFour,
  nextState: nextState,
  moveOfString: moveOfString,
  estimateRow: estimateRow,
  estimateBoard: estimateBoard,
  estimateValue: estimateValue
};

CS17SetupGame$Game.checkExpect(/* P2 */1, /* P2 */1, "otherPlater P1");

CS17SetupGame$Game.checkExpect(/* P1 */0, /* P1 */0, "otherPlater P2");

CS17SetupGame$Game.checkExpect("P1", "P1", "stringOfPlayer P1");

CS17SetupGame$Game.checkExpect("P2", "P2", "stringOfPlayer P2");

CS17SetupGame$Game.checkExpect("T1", "T1", "string_of_token T1");

CS17SetupGame$Game.checkExpect("T2", "T2", "string_of_token T2");

CS17SetupGame$Game.checkExpect(createEmptyRow(3), {
      hd: /* Empty */0,
      tl: {
        hd: /* Empty */0,
        tl: {
          hd: /* Empty */0,
          tl: /* [] */0
        }
      }
    }, "createEmptyRow 3");

CS17SetupGame$Game.checkExpect(createEmptyRow(0), /* [] */0, "createEmptyRow 0");

CS17SetupGame$Game.checkExpect(createEmptyRow(1), {
      hd: /* Empty */0,
      tl: /* [] */0
    }, "createEmptyRow 1");

CS17SetupGame$Game.checkError((function (param) {
        return createEmptyRow(-4);
      }), "a row needs a positive number of columns");

CS17SetupGame$Game.checkExpect(createBoard(3, {
          hd: /* Empty */0,
          tl: {
            hd: /* Empty */0,
            tl: {
              hd: /* Empty */0,
              tl: /* [] */0
            }
          }
        }), {
      hd: {
        hd: /* Empty */0,
        tl: {
          hd: /* Empty */0,
          tl: {
            hd: /* Empty */0,
            tl: /* [] */0
          }
        }
      },
      tl: {
        hd: {
          hd: /* Empty */0,
          tl: {
            hd: /* Empty */0,
            tl: {
              hd: /* Empty */0,
              tl: /* [] */0
            }
          }
        },
        tl: {
          hd: {
            hd: /* Empty */0,
            tl: {
              hd: /* Empty */0,
              tl: {
                hd: /* Empty */0,
                tl: /* [] */0
              }
            }
          },
          tl: /* [] */0
        }
      }
    }, "createBoard 3 x 3");

CS17SetupGame$Game.checkExpect(createBoard(2, {
          hd: /* Empty */0,
          tl: {
            hd: /* Empty */0,
            tl: {
              hd: /* Empty */0,
              tl: /* [] */0
            }
          }
        }), {
      hd: {
        hd: /* Empty */0,
        tl: {
          hd: /* Empty */0,
          tl: {
            hd: /* Empty */0,
            tl: /* [] */0
          }
        }
      },
      tl: {
        hd: {
          hd: /* Empty */0,
          tl: {
            hd: /* Empty */0,
            tl: {
              hd: /* Empty */0,
              tl: /* [] */0
            }
          }
        },
        tl: /* [] */0
      }
    }, "createBoard 2 x 3");

CS17SetupGame$Game.checkExpect(createBoard(0, {
          hd: /* Empty */0,
          tl: {
            hd: /* Empty */0,
            tl: /* [] */0
          }
        }), /* [] */0, "createBoard empty");

CS17SetupGame$Game.checkError((function (param) {
        return createBoard(-4, {
                    hd: /* Empty */0,
                    tl: {
                      hd: /* Empty */0,
                      tl: /* [] */0
                    }
                  });
      }), "a board needs a positive number of rows");

CS17SetupGame$Game.checkExpect(initialState("4 4"), /* State */{
      _0: {
        TAG: /* Ongoing */1,
        _0: /* P1 */0
      },
      _1: {
        hd: {
          hd: /* Empty */0,
          tl: {
            hd: /* Empty */0,
            tl: {
              hd: /* Empty */0,
              tl: {
                hd: /* Empty */0,
                tl: /* [] */0
              }
            }
          }
        },
        tl: {
          hd: {
            hd: /* Empty */0,
            tl: {
              hd: /* Empty */0,
              tl: {
                hd: /* Empty */0,
                tl: {
                  hd: /* Empty */0,
                  tl: /* [] */0
                }
              }
            }
          },
          tl: {
            hd: {
              hd: /* Empty */0,
              tl: {
                hd: /* Empty */0,
                tl: {
                  hd: /* Empty */0,
                  tl: {
                    hd: /* Empty */0,
                    tl: /* [] */0
                  }
                }
              }
            },
            tl: {
              hd: {
                hd: /* Empty */0,
                tl: {
                  hd: /* Empty */0,
                  tl: {
                    hd: /* Empty */0,
                    tl: {
                      hd: /* Empty */0,
                      tl: /* [] */0
                    }
                  }
                }
              },
              tl: /* [] */0
            }
          }
        }
      }
    }, "initialState 4x4");

CS17SetupGame$Game.checkExpect(initialState("5 4"), /* State */{
      _0: {
        TAG: /* Ongoing */1,
        _0: /* P1 */0
      },
      _1: {
        hd: {
          hd: /* Empty */0,
          tl: {
            hd: /* Empty */0,
            tl: {
              hd: /* Empty */0,
              tl: {
                hd: /* Empty */0,
                tl: /* [] */0
              }
            }
          }
        },
        tl: {
          hd: {
            hd: /* Empty */0,
            tl: {
              hd: /* Empty */0,
              tl: {
                hd: /* Empty */0,
                tl: {
                  hd: /* Empty */0,
                  tl: /* [] */0
                }
              }
            }
          },
          tl: {
            hd: {
              hd: /* Empty */0,
              tl: {
                hd: /* Empty */0,
                tl: {
                  hd: /* Empty */0,
                  tl: {
                    hd: /* Empty */0,
                    tl: /* [] */0
                  }
                }
              }
            },
            tl: {
              hd: {
                hd: /* Empty */0,
                tl: {
                  hd: /* Empty */0,
                  tl: {
                    hd: /* Empty */0,
                    tl: {
                      hd: /* Empty */0,
                      tl: /* [] */0
                    }
                  }
                }
              },
              tl: {
                hd: {
                  hd: /* Empty */0,
                  tl: {
                    hd: /* Empty */0,
                    tl: {
                      hd: /* Empty */0,
                      tl: {
                        hd: /* Empty */0,
                        tl: /* [] */0
                      }
                    }
                  }
                },
                tl: /* [] */0
              }
            }
          }
        }
      }
    }, "initialState 5x4");

CS17SetupGame$Game.checkError((function (param) {
        return initialState("3 4");
      }), "Domain error, board must be at least 4x4");

CS17SetupGame$Game.checkExpect(printIntListContents({
          hd: /* Empty */0,
          tl: {
            hd: /* T2 */2,
            tl: {
              hd: /* T1 */1,
              tl: /* [] */0
            }
          }
        }), "   | T2 | T1", "printIntListContents");

CS17SetupGame$Game.checkExpect(printIntListContents(/* [] */0), "", "printIntListContents empty");

CS17SetupGame$Game.checkExpect(printIntList({
          hd: /* Empty */0,
          tl: {
            hd: /* T2 */2,
            tl: {
              hd: /* T1 */1,
              tl: /* [] */0
            }
          }
        }), "[   | T2 | T1]", "printIntList");

CS17SetupGame$Game.checkExpect(printBoard({
          hd: {
            hd: /* Empty */0,
            tl: {
              hd: /* T1 */1,
              tl: {
                hd: /* T2 */2,
                tl: {
                  hd: /* T2 */2,
                  tl: /* [] */0
                }
              }
            }
          },
          tl: {
            hd: {
              hd: /* Empty */0,
              tl: {
                hd: /* Empty */0,
                tl: {
                  hd: /* T1 */1,
                  tl: {
                    hd: /* Empty */0,
                    tl: /* [] */0
                  }
                }
              }
            },
            tl: {
              hd: {
                hd: /* Empty */0,
                tl: {
                  hd: /* Empty */0,
                  tl: {
                    hd: /* T1 */1,
                    tl: {
                      hd: /* Empty */0,
                      tl: /* [] */0
                    }
                  }
                }
              },
              tl: {
                hd: {
                  hd: /* Empty */0,
                  tl: {
                    hd: /* Empty */0,
                    tl: {
                      hd: /* T2 */2,
                      tl: {
                        hd: /* Empty */0,
                        tl: /* [] */0
                      }
                    }
                  }
                },
                tl: /* [] */0
              }
            }
          }
        }), "[   | T1 | T2 | T2]\n[   |    | T1 |   ]\n[   |    | T1 |   ]\n[   |    | T2 |   ]", "printBoard");

CS17SetupGame$Game.checkExpect(printBoard(/* [] */0), "", "emptyBoard");

CS17SetupGame$Game.checkExpect(printBoard({
          hd: {
            hd: /* Empty */0,
            tl: {
              hd: /* T1 */1,
              tl: {
                hd: /* T2 */2,
                tl: /* [] */0
              }
            }
          },
          tl: /* [] */0
        }), "[   | T1 | T2]", "printBoard");

CS17SetupGame$Game.checkExpect(stringOfState(/* State */{
          _0: {
            TAG: /* Ongoing */1,
            _0: /* P1 */0
          },
          _1: {
            hd: {
              hd: /* Empty */0,
              tl: {
                hd: /* T1 */1,
                tl: {
                  hd: /* T2 */2,
                  tl: {
                    hd: /* T2 */2,
                    tl: /* [] */0
                  }
                }
              }
            },
            tl: {
              hd: {
                hd: /* Empty */0,
                tl: {
                  hd: /* Empty */0,
                  tl: {
                    hd: /* T1 */1,
                    tl: {
                      hd: /* T2 */2,
                      tl: /* [] */0
                    }
                  }
                }
              },
              tl: {
                hd: {
                  hd: /* Empty */0,
                  tl: {
                    hd: /* Empty */0,
                    tl: {
                      hd: /* T1 */1,
                      tl: {
                        hd: /* T2 */2,
                        tl: /* [] */0
                      }
                    }
                  }
                },
                tl: {
                  hd: {
                    hd: /* Empty */0,
                    tl: {
                      hd: /* Empty */0,
                      tl: {
                        hd: /* T2 */2,
                        tl: {
                          hd: /* T2 */2,
                          tl: /* [] */0
                        }
                      }
                    }
                  },
                  tl: /* [] */0
                }
              }
            }
          }
        }), "[   | T1 | T2 | T2]\n[   |    | T1 | T2]\n[   |    | T1 | T2]\n[   |    | T2 | T2]", "stringOfState ongoing");

CS17SetupGame$Game.checkExpect(stringOfState(/* State */{
          _0: {
            TAG: /* Win */0,
            _0: /* P1 */0
          },
          _1: {
            hd: {
              hd: /* Empty */0,
              tl: {
                hd: /* T1 */1,
                tl: {
                  hd: /* T1 */1,
                  tl: {
                    hd: /* T2 */2,
                    tl: /* [] */0
                  }
                }
              }
            },
            tl: {
              hd: {
                hd: /* Empty */0,
                tl: {
                  hd: /* Empty */0,
                  tl: {
                    hd: /* T1 */1,
                    tl: {
                      hd: /* T2 */2,
                      tl: /* [] */0
                    }
                  }
                }
              },
              tl: {
                hd: {
                  hd: /* Empty */0,
                  tl: {
                    hd: /* Empty */0,
                    tl: {
                      hd: /* T1 */1,
                      tl: {
                        hd: /* Empty */0,
                        tl: /* [] */0
                      }
                    }
                  }
                },
                tl: {
                  hd: {
                    hd: /* Empty */0,
                    tl: {
                      hd: /* Empty */0,
                      tl: {
                        hd: /* T1 */1,
                        tl: {
                          hd: /* Empty */0,
                          tl: /* [] */0
                        }
                      }
                    }
                  },
                  tl: /* [] */0
                }
              }
            }
          }
        }), "[   | T1 | T1 | T2]\n[   |    | T1 | T2]\n[   |    | T1 |   ]\n[   |    | T1 |   ]", "stringOfState win");

CS17SetupGame$Game.checkExpect(stringOfMove(/* Move */{
          _0: 4
        }), "Player placed token in column 4", "stringOfMove");

CS17SetupGame$Game.checkExpect(stringOfMove(/* Move */{
          _0: 1
        }), "Player placed token in column 1", "stringOfMove");

CS17SetupGame$Game.checkExpect(legalMoves(/* State */{
          _0: {
            TAG: /* Ongoing */1,
            _0: /* P1 */0
          },
          _1: {
            hd: {
              hd: /* Empty */0,
              tl: {
                hd: /* T1 */1,
                tl: {
                  hd: /* T2 */2,
                  tl: {
                    hd: /* Empty */0,
                    tl: /* [] */0
                  }
                }
              }
            },
            tl: {
              hd: {
                hd: /* Empty */0,
                tl: {
                  hd: /* T2 */2,
                  tl: {
                    hd: /* T1 */1,
                    tl: {
                      hd: /* T2 */2,
                      tl: /* [] */0
                    }
                  }
                }
              },
              tl: {
                hd: {
                  hd: /* Empty */0,
                  tl: {
                    hd: /* T1 */1,
                    tl: {
                      hd: /* T1 */1,
                      tl: {
                        hd: /* T2 */2,
                        tl: /* [] */0
                      }
                    }
                  }
                },
                tl: {
                  hd: {
                    hd: /* Empty */0,
                    tl: {
                      hd: /* T2 */2,
                      tl: {
                        hd: /* T1 */1,
                        tl: {
                          hd: /* T2 */2,
                          tl: /* [] */0
                        }
                      }
                    }
                  },
                  tl: /* [] */0
                }
              }
            }
          }
        }), {
      hd: /* Move */{
        _0: 1
      },
      tl: {
        hd: /* Move */{
          _0: 4
        },
        tl: /* [] */0
      }
    }, "legalMoves");

CS17SetupGame$Game.checkExpect(legalMoves(/* State */{
          _0: {
            TAG: /* Ongoing */1,
            _0: /* P1 */0
          },
          _1: {
            hd: {
              hd: /* T2 */2,
              tl: /* [] */0
            },
            tl: {
              hd: {
                hd: /* T1 */1,
                tl: /* [] */0
              },
              tl: {
                hd: {
                  hd: /* T2 */2,
                  tl: /* [] */0
                },
                tl: /* [] */0
              }
            }
          }
        }), /* [] */0, "legalMovesNone");

CS17SetupGame$Game.checkExpect(legalMoves(/* State */{
          _0: {
            TAG: /* Ongoing */1,
            _0: /* P1 */0
          },
          _1: {
            hd: {
              hd: /* T2 */2,
              tl: {
                hd: /* T1 */1,
                tl: {
                  hd: /* T2 */2,
                  tl: {
                    hd: /* Empty */0,
                    tl: /* [] */0
                  }
                }
              }
            },
            tl: {
              hd: {
                hd: /* Empty */0,
                tl: {
                  hd: /* T2 */2,
                  tl: {
                    hd: /* T1 */1,
                    tl: {
                      hd: /* T2 */2,
                      tl: /* [] */0
                    }
                  }
                }
              },
              tl: {
                hd: {
                  hd: /* Empty */0,
                  tl: {
                    hd: /* T1 */1,
                    tl: {
                      hd: /* T1 */1,
                      tl: {
                        hd: /* T2 */2,
                        tl: /* [] */0
                      }
                    }
                  }
                },
                tl: {
                  hd: {
                    hd: /* Empty */0,
                    tl: {
                      hd: /* T2 */2,
                      tl: {
                        hd: /* T1 */1,
                        tl: {
                          hd: /* T2 */2,
                          tl: /* [] */0
                        }
                      }
                    }
                  },
                  tl: /* [] */0
                }
              }
            }
          }
        }), {
      hd: /* Move */{
        _0: 4
      },
      tl: /* [] */0
    }, "legalMoves");

CS17SetupGame$Game.checkError((function (param) {
        return legalMoves(/* State */{
                    _0: {
                      TAG: /* Ongoing */1,
                      _0: /* P1 */0
                    },
                    _1: /* [] */0
                  });
      }), "empty row does not exist");

CS17SetupGame$Game.checkExpect(legalMovesHelper({
          hd: /* Empty */0,
          tl: {
            hd: /* T1 */1,
            tl: {
              hd: /* T2 */2,
              tl: {
                hd: /* Empty */0,
                tl: /* [] */0
              }
            }
          }
        }, 1), {
      hd: /* Move */{
        _0: 1
      },
      tl: {
        hd: /* Move */{
          _0: 4
        },
        tl: /* [] */0
      }
    }, "legalMovesHelper");

CS17SetupGame$Game.checkExpect(legalMovesHelper({
          hd: /* T2 */2,
          tl: /* [] */0
        }, 1), /* [] */0, "legalMovesNone");

CS17SetupGame$Game.checkExpect({
      TAG: /* Ongoing */1,
      _0: /* P1 */0
    }, {
      TAG: /* Ongoing */1,
      _0: /* P1 */0
    }, "gameStatus Ongoing");

CS17SetupGame$Game.checkExpect({
      TAG: /* Win */0,
      _0: /* P1 */0
    }, {
      TAG: /* Win */0,
      _0: /* P1 */0
    }, "gameStatus win");

CS17SetupGame$Game.checkExpect(/* Draw */0, /* Draw */0, "gameStatus draw");

CS17SetupGame$Game.checkExpect(estimateRow({
          hd: /* Empty */0,
          tl: {
            hd: /* Empty */0,
            tl: {
              hd: /* Empty */0,
              tl: {
                hd: /* Empty */0,
                tl: /* [] */0
              }
            }
          }
        }), 0.0, "estimateRow 4 E");

CS17SetupGame$Game.checkExpect(estimateRow({
          hd: /* T1 */1,
          tl: {
            hd: /* T1 */1,
            tl: {
              hd: /* T1 */1,
              tl: {
                hd: /* T1 */1,
                tl: /* [] */0
              }
            }
          }
        }), 1000000.0, "estimateRow 4 T1");

CS17SetupGame$Game.checkExpect(estimateRow({
          hd: /* T2 */2,
          tl: {
            hd: /* T2 */2,
            tl: {
              hd: /* T2 */2,
              tl: {
                hd: /* T2 */2,
                tl: /* [] */0
              }
            }
          }
        }), -1000000.0, "estimateRow 4 T2");

CS17SetupGame$Game.checkExpect(estimateRow({
          hd: /* T2 */2,
          tl: {
            hd: /* T2 */2,
            tl: {
              hd: /* T2 */2,
              tl: {
                hd: /* T1 */1,
                tl: /* [] */0
              }
            }
          }
        }), 10000.0, "estimateRow 3 T2 block");

CS17SetupGame$Game.checkExpect(estimateRow({
          hd: /* T2 */2,
          tl: {
            hd: /* T1 */1,
            tl: {
              hd: /* T2 */2,
              tl: {
                hd: /* T2 */2,
                tl: /* [] */0
              }
            }
          }
        }), 10000.0, "estimateRow 3 T2 block");

CS17SetupGame$Game.checkExpect(estimateRow({
          hd: /* T1 */1,
          tl: {
            hd: /* T2 */2,
            tl: {
              hd: /* T1 */1,
              tl: {
                hd: /* T1 */1,
                tl: /* [] */0
              }
            }
          }
        }), -10000.0, "estimateRow 3 T1 block");

CS17SetupGame$Game.checkExpect(estimateRow({
          hd: /* T1 */1,
          tl: {
            hd: /* T1 */1,
            tl: {
              hd: /* T1 */1,
              tl: {
                hd: /* T2 */2,
                tl: /* [] */0
              }
            }
          }
        }), -10000.0, "estimateRow 3 T1 block");

CS17SetupGame$Game.checkExpect(estimateRow({
          hd: /* Empty */0,
          tl: {
            hd: /* Empty */0,
            tl: {
              hd: /* Empty */0,
              tl: /* [] */0
            }
          }
        }), 0.0, "3 empty");

CS17SetupGame$Game.checkExpect(estimateRow({
          hd: /* T1 */1,
          tl: {
            hd: /* T1 */1,
            tl: {
              hd: /* T1 */1,
              tl: /* [] */0
            }
          }
        }), 100.0, "3 T1");

CS17SetupGame$Game.checkExpect(estimateRow({
          hd: /* T2 */2,
          tl: {
            hd: /* T2 */2,
            tl: {
              hd: /* T2 */2,
              tl: /* [] */0
            }
          }
        }), -100.0, "3 T2");

CS17SetupGame$Game.checkExpect(estimateRow({
          hd: /* Empty */0,
          tl: {
            hd: /* Empty */0,
            tl: /* [] */0
          }
        }), 0.0, "2 empty");

CS17SetupGame$Game.checkExpect(estimateRow({
          hd: /* T1 */1,
          tl: {
            hd: /* T1 */1,
            tl: /* [] */0
          }
        }), 10.0, "2 T1");

CS17SetupGame$Game.checkExpect(estimateRow({
          hd: /* T2 */2,
          tl: {
            hd: /* T2 */2,
            tl: /* [] */0
          }
        }), -10.0, "2 empty");

CS17SetupGame$Game.checkExpect(estimateRow({
          hd: /* Empty */0,
          tl: /* [] */0
        }), 0.0, "1 empty");

CS17SetupGame$Game.checkExpect(estimateRow({
          hd: /* T1 */1,
          tl: /* [] */0
        }), 1.0, "1 T1");

CS17SetupGame$Game.checkExpect(estimateRow({
          hd: /* T2 */2,
          tl: /* [] */0
        }), -1.0, "1 T2");

CS17SetupGame$Game.checkExpect(estimateRow(/* [] */0), 0.0, "empty value");

CS17SetupGame$Game.checkExpect(estimateRow({
          hd: /* Empty */0,
          tl: {
            hd: /* Empty */0,
            tl: {
              hd: /* Empty */0,
              tl: {
                hd: /* Empty */0,
                tl: {
                  hd: /* T1 */1,
                  tl: /* [] */0
                }
              }
            }
          }
        }), 1.0, "4 empty1 T1");

CS17SetupGame$Game.checkExpect(estimateRow({
          hd: /* T2 */2,
          tl: {
            hd: /* T2 */2,
            tl: {
              hd: /* T2 */2,
              tl: {
                hd: /* T1 */1,
                tl: {
                  hd: /* T1 */1,
                  tl: /* [] */0
                }
              }
            }
          }
        }), 5001.0, "estimateRow 3 T2 block 1 T1");

CS17SetupGame$Game.checkExpect(estimateRow({
          hd: /* T1 */1,
          tl: {
            hd: /* T2 */2,
            tl: {
              hd: /* T1 */1,
              tl: {
                hd: /* T1 */1,
                tl: {
                  hd: /* T1 */1,
                  tl: /* [] */0
                }
              }
            }
          }
        }), -4999.0, "estimateRow 3 T1 block 1 T1");

CS17SetupGame$Game.checkExpect(estimateRow({
          hd: /* T1 */1,
          tl: {
            hd: /* T1 */1,
            tl: {
              hd: /* T1 */1,
              tl: {
                hd: /* T1 */1,
                tl: {
                  hd: /* T1 */1,
                  tl: /* [] */0
                }
              }
            }
          }
        }), 1000001.0, "estimateRow 4 T1 and 1 T1");

CS17SetupGame$Game.checkExpect(estimateRow({
          hd: /* T2 */2,
          tl: {
            hd: /* T2 */2,
            tl: {
              hd: /* T2 */2,
              tl: {
                hd: /* T2 */2,
                tl: {
                  hd: /* T1 */1,
                  tl: /* [] */0
                }
              }
            }
          }
        }), -999999.0, "estimateRow 4 T2 and 1 T1");

CS17SetupGame$Game.checkExpect(estimateRow({
          hd: /* Empty */0,
          tl: {
            hd: /* Empty */0,
            tl: {
              hd: /* Empty */0,
              tl: {
                hd: /* T2 */2,
                tl: /* [] */0
              }
            }
          }
        }), -1.0, "estimateRow 3 E 1 T2");

CS17SetupGame$Game.checkExpect(estimateRow({
          hd: /* T1 */1,
          tl: {
            hd: /* T1 */1,
            tl: {
              hd: /* T1 */1,
              tl: {
                hd: /* T2 */2,
                tl: /* [] */0
              }
            }
          }
        }), -10000.0, "estimateRow 3 T1 space 1 T1");

CS17SetupGame$Game.checkExpect(estimateRow({
          hd: /* T2 */2,
          tl: {
            hd: /* T2 */2,
            tl: {
              hd: /* T2 */2,
              tl: {
                hd: /* T1 */1,
                tl: /* [] */0
              }
            }
          }
        }), 10000.0, "estimateRow 3 T2 space 1 T1");

CS17SetupGame$Game.checkExpect(estimateRow({
          hd: /* Empty */0,
          tl: {
            hd: /* Empty */0,
            tl: {
              hd: /* T1 */1,
              tl: /* [] */0
            }
          }
        }), 1.0, "2 Empty space 1 T1");

CS17SetupGame$Game.checkExpect(estimateRow({
          hd: /* T1 */1,
          tl: {
            hd: /* T1 */1,
            tl: {
              hd: /* T1 */1,
              tl: /* [] */0
            }
          }
        }), 100.0, "2 T1 space 1 T1");

CS17SetupGame$Game.checkExpect(estimateRow({
          hd: /* T2 */2,
          tl: {
            hd: /* T2 */2,
            tl: {
              hd: /* T1 */1,
              tl: /* [] */0
            }
          }
        }), -9.0, "2 T2, space 1 T1");

CS17SetupGame$Game.checkExpect(estimateRow({
          hd: /* Empty */0,
          tl: {
            hd: /* T2 */2,
            tl: /* [] */0
          }
        }), -1.0, "Empty space 1 T2");

CS17SetupGame$Game.checkExpect(estimateRow({
          hd: /* T1 */1,
          tl: {
            hd: /* T1 */1,
            tl: /* [] */0
          }
        }), 10.0, "estimateRow T1 space T1");

CS17SetupGame$Game.checkExpect(estimateRow({
          hd: /* T2 */2,
          tl: {
            hd: /* T1 */1,
            tl: /* [] */0
          }
        }), 0.0, "estimateRow T2 space T1");

CS17SetupGame$Game.checkExpectListListAlpha(transpose({
          hd: {
            hd: /* Empty */0,
            tl: {
              hd: /* Empty */0,
              tl: {
                hd: /* Empty */0,
                tl: /* [] */0
              }
            }
          },
          tl: {
            hd: {
              hd: /* Empty */0,
              tl: {
                hd: /* Empty */0,
                tl: {
                  hd: /* Empty */0,
                  tl: /* [] */0
                }
              }
            },
            tl: {
              hd: {
                hd: /* Empty */0,
                tl: {
                  hd: /* Empty */0,
                  tl: {
                    hd: /* Empty */0,
                    tl: /* [] */0
                  }
                }
              },
              tl: /* [] */0
            }
          }
        }), {
      hd: {
        hd: /* Empty */0,
        tl: {
          hd: /* Empty */0,
          tl: {
            hd: /* Empty */0,
            tl: /* [] */0
          }
        }
      },
      tl: {
        hd: {
          hd: /* Empty */0,
          tl: {
            hd: /* Empty */0,
            tl: {
              hd: /* Empty */0,
              tl: /* [] */0
            }
          }
        },
        tl: {
          hd: {
            hd: /* Empty */0,
            tl: {
              hd: /* Empty */0,
              tl: {
                hd: /* Empty */0,
                tl: /* [] */0
              }
            }
          },
          tl: /* [] */0
        }
      }
    }, "transpose empty 3 x 3");

CS17SetupGame$Game.checkExpectListListAlpha(transpose({
          hd: {
            hd: /* T1 */1,
            tl: {
              hd: /* T1 */1,
              tl: {
                hd: /* T1 */1,
                tl: /* [] */0
              }
            }
          },
          tl: {
            hd: {
              hd: /* T1 */1,
              tl: {
                hd: /* T1 */1,
                tl: {
                  hd: /* T1 */1,
                  tl: /* [] */0
                }
              }
            },
            tl: {
              hd: {
                hd: /* T1 */1,
                tl: {
                  hd: /* T1 */1,
                  tl: {
                    hd: /* T1 */1,
                    tl: /* [] */0
                  }
                }
              },
              tl: /* [] */0
            }
          }
        }), {
      hd: {
        hd: /* T1 */1,
        tl: {
          hd: /* T1 */1,
          tl: {
            hd: /* T1 */1,
            tl: /* [] */0
          }
        }
      },
      tl: {
        hd: {
          hd: /* T1 */1,
          tl: {
            hd: /* T1 */1,
            tl: {
              hd: /* T1 */1,
              tl: /* [] */0
            }
          }
        },
        tl: {
          hd: {
            hd: /* T1 */1,
            tl: {
              hd: /* T1 */1,
              tl: {
                hd: /* T1 */1,
                tl: /* [] */0
              }
            }
          },
          tl: /* [] */0
        }
      }
    }, "transpose T1 3 x 3");

CS17SetupGame$Game.checkExpectListListAlpha(transpose({
          hd: {
            hd: /* T2 */2,
            tl: {
              hd: /* T2 */2,
              tl: {
                hd: /* T2 */2,
                tl: /* [] */0
              }
            }
          },
          tl: {
            hd: {
              hd: /* T2 */2,
              tl: {
                hd: /* T2 */2,
                tl: {
                  hd: /* T2 */2,
                  tl: /* [] */0
                }
              }
            },
            tl: {
              hd: {
                hd: /* T2 */2,
                tl: {
                  hd: /* T2 */2,
                  tl: {
                    hd: /* T2 */2,
                    tl: /* [] */0
                  }
                }
              },
              tl: /* [] */0
            }
          }
        }), {
      hd: {
        hd: /* T2 */2,
        tl: {
          hd: /* T2 */2,
          tl: {
            hd: /* T2 */2,
            tl: /* [] */0
          }
        }
      },
      tl: {
        hd: {
          hd: /* T2 */2,
          tl: {
            hd: /* T2 */2,
            tl: {
              hd: /* T2 */2,
              tl: /* [] */0
            }
          }
        },
        tl: {
          hd: {
            hd: /* T2 */2,
            tl: {
              hd: /* T2 */2,
              tl: {
                hd: /* T2 */2,
                tl: /* [] */0
              }
            }
          },
          tl: /* [] */0
        }
      }
    }, "transpose T2 3 x 3");

CS17SetupGame$Game.checkExpectListListAlpha(transpose({
          hd: {
            hd: /* Empty */0,
            tl: {
              hd: /* T2 */2,
              tl: {
                hd: /* T1 */1,
                tl: {
                  hd: /* Empty */0,
                  tl: /* [] */0
                }
              }
            }
          },
          tl: {
            hd: {
              hd: /* T1 */1,
              tl: {
                hd: /* T2 */2,
                tl: {
                  hd: /* Empty */0,
                  tl: {
                    hd: /* Empty */0,
                    tl: /* [] */0
                  }
                }
              }
            },
            tl: /* [] */0
          }
        }), {
      hd: {
        hd: /* Empty */0,
        tl: {
          hd: /* T1 */1,
          tl: /* [] */0
        }
      },
      tl: {
        hd: {
          hd: /* T2 */2,
          tl: {
            hd: /* T2 */2,
            tl: /* [] */0
          }
        },
        tl: {
          hd: {
            hd: /* T1 */1,
            tl: {
              hd: /* Empty */0,
              tl: /* [] */0
            }
          },
          tl: {
            hd: {
              hd: /* Empty */0,
              tl: {
                hd: /* Empty */0,
                tl: /* [] */0
              }
            },
            tl: /* [] */0
          }
        }
      }
    }, "transpose 2 x 4");

CS17SetupGame$Game.checkExpectListListAlpha(transpose({
          hd: {
            hd: /* T1 */1,
            tl: {
              hd: /* T1 */1,
              tl: /* [] */0
            }
          },
          tl: {
            hd: {
              hd: /* T2 */2,
              tl: {
                hd: /* T2 */2,
                tl: /* [] */0
              }
            },
            tl: /* [] */0
          }
        }), {
      hd: {
        hd: /* T1 */1,
        tl: {
          hd: /* T2 */2,
          tl: /* [] */0
        }
      },
      tl: {
        hd: {
          hd: /* T1 */1,
          tl: {
            hd: /* T2 */2,
            tl: /* [] */0
          }
        },
        tl: /* [] */0
      }
    }, "transpose t1 t2 2 x 2");

CS17SetupGame$Game.checkExpectListListAlpha(transpose({
          hd: {
            hd: /* Empty */0,
            tl: {
              hd: /* Empty */0,
              tl: /* [] */0
            }
          },
          tl: /* [] */0
        }), {
      hd: {
        hd: /* Empty */0,
        tl: /* [] */0
      },
      tl: {
        hd: {
          hd: /* Empty */0,
          tl: /* [] */0
        },
        tl: /* [] */0
      }
    }, "transpose single row into single column");

CS17SetupGame$Game.checkExpectListListAlpha(transpose({
          hd: {
            hd: /* T1 */1,
            tl: /* [] */0
          },
          tl: {
            hd: {
              hd: /* T2 */2,
              tl: /* [] */0
            },
            tl: /* [] */0
          }
        }), {
      hd: {
        hd: /* T1 */1,
        tl: {
          hd: /* T2 */2,
          tl: /* [] */0
        }
      },
      tl: /* [] */0
    }, "transpose single column into single row");

CS17SetupGame$Game.checkExpect(placeHolders(0), /* [] */0, "placeHolders Empty");

CS17SetupGame$Game.checkExpect(placeHolders(1), {
      hd: /* Empty */0,
      tl: /* [] */0
    }, "placeHolders 1");

CS17SetupGame$Game.checkExpect(placeHolders(2), {
      hd: /* Empty */0,
      tl: {
        hd: /* Empty */0,
        tl: /* [] */0
      }
    }, "placeHolders 2");

CS17SetupGame$Game.checkExpect(diagonalTransposeHelper({
          hd: {
            hd: /* T1 */1,
            tl: /* [] */0
          },
          tl: /* [] */0
        }, /* [] */0, /* [] */0), {
      hd: {
        hd: /* T1 */1,
        tl: /* [] */0
      },
      tl: /* [] */0
    }, "diagonalTransposeHelper on 1 x 1");

CS17SetupGame$Game.checkExpect(diagonalTransposeHelper({
          hd: {
            hd: /* T1 */1,
            tl: {
              hd: /* Empty */0,
              tl: {
                hd: /* T2 */2,
                tl: /* [] */0
              }
            }
          },
          tl: /* [] */0
        }, /* [] */0, /* [] */0), {
      hd: {
        hd: /* T1 */1,
        tl: {
          hd: /* Empty */0,
          tl: {
            hd: /* T2 */2,
            tl: /* [] */0
          }
        }
      },
      tl: /* [] */0
    }, "diagonalTransposeHelper on 1 x 3");

CS17SetupGame$Game.checkExpect(diagonalTransposeHelper({
          hd: {
            hd: /* T1 */1,
            tl: {
              hd: /* T2 */2,
              tl: /* [] */0
            }
          },
          tl: {
            hd: {
              hd: /* Empty */0,
              tl: {
                hd: /* Empty */0,
                tl: /* [] */0
              }
            },
            tl: /* [] */0
          }
        }, {
          hd: /* Empty */0,
          tl: /* [] */0
        }, /* [] */0), {
      hd: {
        hd: /* T1 */1,
        tl: {
          hd: /* T2 */2,
          tl: {
            hd: /* Empty */0,
            tl: /* [] */0
          }
        }
      },
      tl: {
        hd: {
          hd: /* Empty */0,
          tl: {
            hd: /* Empty */0,
            tl: {
              hd: /* Empty */0,
              tl: /* [] */0
            }
          }
        },
        tl: /* [] */0
      }
    }, "diagonalTransposeHelper on 2 x 2");

CS17SetupGame$Game.checkExpect(diagonalTransposeHelper({
          hd: {
            hd: /* T1 */1,
            tl: {
              hd: /* T2 */2,
              tl: /* [] */0
            }
          },
          tl: {
            hd: {
              hd: /* Empty */0,
              tl: {
                hd: /* Empty */0,
                tl: /* [] */0
              }
            },
            tl: {
              hd: {
                hd: /* T2 */2,
                tl: {
                  hd: /* Empty */0,
                  tl: /* [] */0
                }
              },
              tl: /* [] */0
            }
          }
        }, {
          hd: /* Empty */0,
          tl: {
            hd: /* Empty */0,
            tl: /* [] */0
          }
        }, /* [] */0), {
      hd: {
        hd: /* T1 */1,
        tl: {
          hd: /* T2 */2,
          tl: {
            hd: /* Empty */0,
            tl: {
              hd: /* Empty */0,
              tl: /* [] */0
            }
          }
        }
      },
      tl: {
        hd: {
          hd: /* Empty */0,
          tl: {
            hd: /* Empty */0,
            tl: {
              hd: /* Empty */0,
              tl: {
                hd: /* Empty */0,
                tl: /* [] */0
              }
            }
          }
        },
        tl: {
          hd: {
            hd: /* Empty */0,
            tl: {
              hd: /* Empty */0,
              tl: {
                hd: /* T2 */2,
                tl: {
                  hd: /* Empty */0,
                  tl: /* [] */0
                }
              }
            }
          },
          tl: /* [] */0
        }
      }
    }, "diagonalTransposeHelper on 3 x 2");

CS17SetupGame$Game.checkExpect(diagonalTranspose({
          hd: {
            hd: /* T1 */1,
            tl: /* [] */0
          },
          tl: /* [] */0
        }), {
      hd: {
        hd: /* T1 */1,
        tl: /* [] */0
      },
      tl: /* [] */0
    }, "diagonalTranspose on 1 x 1");

CS17SetupGame$Game.checkExpect(diagonalTranspose({
          hd: {
            hd: /* T1 */1,
            tl: {
              hd: /* Empty */0,
              tl: {
                hd: /* T2 */2,
                tl: /* [] */0
              }
            }
          },
          tl: /* [] */0
        }), {
      hd: {
        hd: /* T1 */1,
        tl: /* [] */0
      },
      tl: {
        hd: {
          hd: /* Empty */0,
          tl: /* [] */0
        },
        tl: {
          hd: {
            hd: /* T2 */2,
            tl: /* [] */0
          },
          tl: /* [] */0
        }
      }
    }, "diagonalTranspose on 1 x 3");

CS17SetupGame$Game.checkExpect(diagonalTranspose({
          hd: {
            hd: /* T1 */1,
            tl: {
              hd: /* T2 */2,
              tl: /* [] */0
            }
          },
          tl: {
            hd: {
              hd: /* Empty */0,
              tl: {
                hd: /* Empty */0,
                tl: /* [] */0
              }
            },
            tl: /* [] */0
          }
        }), {
      hd: {
        hd: /* T1 */1,
        tl: {
          hd: /* Empty */0,
          tl: /* [] */0
        }
      },
      tl: {
        hd: {
          hd: /* T2 */2,
          tl: {
            hd: /* Empty */0,
            tl: /* [] */0
          }
        },
        tl: {
          hd: {
            hd: /* Empty */0,
            tl: {
              hd: /* Empty */0,
              tl: /* [] */0
            }
          },
          tl: /* [] */0
        }
      }
    }, "diagonalTranspose on 2 x 2");

CS17SetupGame$Game.checkExpect(diagonalTranspose({
          hd: {
            hd: /* T1 */1,
            tl: {
              hd: /* T2 */2,
              tl: /* [] */0
            }
          },
          tl: {
            hd: {
              hd: /* Empty */0,
              tl: {
                hd: /* Empty */0,
                tl: /* [] */0
              }
            },
            tl: {
              hd: {
                hd: /* T2 */2,
                tl: {
                  hd: /* Empty */0,
                  tl: /* [] */0
                }
              },
              tl: /* [] */0
            }
          }
        }), {
      hd: {
        hd: /* T1 */1,
        tl: {
          hd: /* Empty */0,
          tl: {
            hd: /* Empty */0,
            tl: /* [] */0
          }
        }
      },
      tl: {
        hd: {
          hd: /* T2 */2,
          tl: {
            hd: /* Empty */0,
            tl: {
              hd: /* Empty */0,
              tl: /* [] */0
            }
          }
        },
        tl: {
          hd: {
            hd: /* Empty */0,
            tl: {
              hd: /* Empty */0,
              tl: {
                hd: /* T2 */2,
                tl: /* [] */0
              }
            }
          },
          tl: {
            hd: {
              hd: /* Empty */0,
              tl: {
                hd: /* Empty */0,
                tl: {
                  hd: /* Empty */0,
                  tl: /* [] */0
                }
              }
            },
            tl: /* [] */0
          }
        }
      }
    }, "diagonalTranspose on 3 x 2");

CS17SetupGame$Game.checkExpect(diagonalTranspose({
          hd: {
            hd: /* Empty */0,
            tl: {
              hd: /* T1 */1,
              tl: {
                hd: /* T2 */2,
                tl: {
                  hd: /* Empty */0,
                  tl: /* [] */0
                }
              }
            }
          },
          tl: {
            hd: {
              hd: /* Empty */0,
              tl: {
                hd: /* T2 */2,
                tl: {
                  hd: /* T1 */1,
                  tl: {
                    hd: /* T2 */2,
                    tl: /* [] */0
                  }
                }
              }
            },
            tl: {
              hd: {
                hd: /* Empty */0,
                tl: {
                  hd: /* T1 */1,
                  tl: {
                    hd: /* T1 */1,
                    tl: {
                      hd: /* T2 */2,
                      tl: /* [] */0
                    }
                  }
                }
              },
              tl: {
                hd: {
                  hd: /* Empty */0,
                  tl: {
                    hd: /* T2 */2,
                    tl: {
                      hd: /* T1 */1,
                      tl: {
                        hd: /* T2 */2,
                        tl: /* [] */0
                      }
                    }
                  }
                },
                tl: /* [] */0
              }
            }
          }
        }), {
      hd: {
        hd: /* Empty */0,
        tl: {
          hd: /* Empty */0,
          tl: {
            hd: /* Empty */0,
            tl: {
              hd: /* Empty */0,
              tl: /* [] */0
            }
          }
        }
      },
      tl: {
        hd: {
          hd: /* T1 */1,
          tl: {
            hd: /* Empty */0,
            tl: {
              hd: /* Empty */0,
              tl: {
                hd: /* Empty */0,
                tl: /* [] */0
              }
            }
          }
        },
        tl: {
          hd: {
            hd: /* T2 */2,
            tl: {
              hd: /* T2 */2,
              tl: {
                hd: /* Empty */0,
                tl: {
                  hd: /* Empty */0,
                  tl: /* [] */0
                }
              }
            }
          },
          tl: {
            hd: {
              hd: /* Empty */0,
              tl: {
                hd: /* T1 */1,
                tl: {
                  hd: /* T1 */1,
                  tl: {
                    hd: /* Empty */0,
                    tl: /* [] */0
                  }
                }
              }
            },
            tl: {
              hd: {
                hd: /* Empty */0,
                tl: {
                  hd: /* T2 */2,
                  tl: {
                    hd: /* T1 */1,
                    tl: {
                      hd: /* T2 */2,
                      tl: /* [] */0
                    }
                  }
                }
              },
              tl: {
                hd: {
                  hd: /* Empty */0,
                  tl: {
                    hd: /* Empty */0,
                    tl: {
                      hd: /* T2 */2,
                      tl: {
                        hd: /* T1 */1,
                        tl: /* [] */0
                      }
                    }
                  }
                },
                tl: {
                  hd: {
                    hd: /* Empty */0,
                    tl: {
                      hd: /* Empty */0,
                      tl: {
                        hd: /* Empty */0,
                        tl: {
                          hd: /* T2 */2,
                          tl: /* [] */0
                        }
                      }
                    }
                  },
                  tl: /* [] */0
                }
              }
            }
          }
        }
      }
    }, "check diagonalTranspose");

CS17SetupGame$Game.checkExpect(/* T1 */1, /* T1 */1, "p1 to t1");

CS17SetupGame$Game.checkExpect(/* T2 */2, /* T2 */2, "p2 to t2");

CS17SetupGame$Game.checkExpect(updateColumn({
          hd: /* Empty */0,
          tl: /* [] */0
        }, /* T2 */2), {
      hd: /* T2 */2,
      tl: /* [] */0
    }, "update Column, empty");

CS17SetupGame$Game.checkExpect(updateColumn({
          hd: /* Empty */0,
          tl: {
            hd: /* T1 */1,
            tl: /* [] */0
          }
        }, /* T2 */2), {
      hd: /* T2 */2,
      tl: {
        hd: /* T1 */1,
        tl: /* [] */0
      }
    }, "update Column, empty t1");

CS17SetupGame$Game.checkExpect(updateColumn({
          hd: /* Empty */0,
          tl: /* [] */0
        }, /* T1 */1), {
      hd: /* T1 */1,
      tl: /* [] */0
    }, "update Column, empty");

CS17SetupGame$Game.checkExpect(updateColumn({
          hd: /* Empty */0,
          tl: {
            hd: /* Empty */0,
            tl: /* [] */0
          }
        }, /* T1 */1), {
      hd: /* Empty */0,
      tl: {
        hd: /* T1 */1,
        tl: /* [] */0
      }
    }, "update Column, empty empty");

CS17SetupGame$Game.checkExpect(updateColumn({
          hd: /* Empty */0,
          tl: {
            hd: /* T1 */1,
            tl: {
              hd: /* T2 */2,
              tl: /* [] */0
            }
          }
        }, /* T1 */1), {
      hd: /* T1 */1,
      tl: {
        hd: /* T1 */1,
        tl: {
          hd: /* T2 */2,
          tl: /* [] */0
        }
      }
    }, "update Column, empty t1 t2");

var MyGame = {
  stringOfPlayer: stringOfPlayer,
  stringOfState: stringOfState,
  stringOfMove: stringOfMove,
  initialState: initialState,
  legalMoves: legalMoves,
  gameStatus: gameStatus,
  nextState: nextState,
  moveOfString: moveOfString,
  estimateValue: estimateValue
};

exports.Connect4 = Connect4;
exports.MyGame = MyGame;
/*  Not a pure module */
